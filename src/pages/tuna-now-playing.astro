---
import App from '../layouts/_app.astro'
---

<style is:global lang="scss">
	@tailwind components;
	@tailwind utilities;

	.wave {
		@apply text-shadow-md;
	}

	.wave {
		@apply h-[25vh] w-[8vw] fill-sky-800;

		.wave1 {
			animation-delay: 0.6s;
		}
		.wave2 {
			animation-delay: 0.3s;
		}
		.wave3 {
			animation-delay: 0.45s;
		}
		.wave4 {
			animation-delay: 0.15s;
		}
		.wave5 {
			animation-delay: 0.3s;
		}
	}

	@for $i from 1 through 5 {
		.wave#{$i} {
			transform: scaleY(0);
			transform-origin: bottom;
			animation: scale 0.6s infinite;
		}
	}

	@keyframes scale {
		0% {
			transform: scaleY(0.25);
		}
		16% {
			transform: scaleY(0.5);
		}
		33% {
			transform: scaleY(0.75);
		}
		50% {
			transform: scaleY(1);
		}
		75% {
			transform: scaleY(0.75);
		}
		100% {
			transform: scaleY(0.5);
		}
	}

	@layer components {
		@responsive {
			.text-shadow {
				text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
			}

			.text-shadow-md {
				text-shadow: 0 4px 8px rgba(0, 0, 0, 0.12),
					0 2px 4px rgba(0, 0, 0, 0.08);
			}

			.text-shadow-lg {
				text-shadow: 0 15px 30px rgba(0, 0, 0, 0.11),
					0 5px 15px rgba(0, 0, 0, 0.08);
			}

			.text-shadow-none {
				text-shadow: none;
			}
		}
	}
</style>

<App>
	<figure
		data-app
		class="backdrop-[acrylic] hidden h-screen flex-row items-stretch justify-end gap-[3vw] rounded-2xl bg-slate-900/50 p-2"
	>
		<!-- text -->
		<div
			id="texts"
			class="flex flex-col items-end justify-center gap-2 p-2 text-center small:flex-row-reverse small:items-center small:p-0"
		>
			<p
				data-title
				class="text-[22vh] font-bold text-slate-200 small:text-[30vh]"
			>
			</p>
			<p
				data-artists
				class="text-[16vh] italic text-slate-400 small:text-[30vh]"
			>
			</p>
		</div>

		<!-- wave -->
		<div class="flex items-center justify-center">
			<svg
				class="wave"
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 56 50"
			>
				<rect
					class="wave1"
					x="00"
					y=""
					width="6"
					height="100%"
				></rect>
				<rect
					class="wave2"
					x="12"
					y="0"
					width="6"
					height="100%"
				></rect>
				<rect
					class="wave3"
					x="24"
					y="0"
					width="6"
					height="100%"
				></rect>
				<rect
					class="wave4"
					x="36"
					y="0"
					width="6"
					height="100%"
				></rect>
				<rect
					class="wave5"
					x="48"
					y="0"
					width="6"
					height="100%"
				></rect>
			</svg>
		</div>
	</figure>
</App>

<script>
	const appElement = document.querySelector('[data-app]')!
	const titleElement: HTMLParagraphElement =
		document.querySelector('[data-title]')!
	const artistsElement: HTMLParagraphElement =
		document.querySelector('[data-artists]')!

	const url = 'http://localhost:1608'
	const titleRegex = (\(|\[)(feat.|ft.|featuring|with|from)(.*)(\)|\])/g

	declare type TrackInfo = {
		status: string
		title: string
		artists: string[]
	}

	async function getTrackInfo(url: string) {
		try {
			const data = await fetch(url).then((res) => res.json())

			const info: TrackInfo = {
				status: data.status,
				title: data.title.replace(titleRegex, ''),
				artists: data.artists
			}
			console.log(info)
			return info
		} catch (err) {
			console.error(err)
		}
	}

	function setElements(info: TrackInfo) {
		if (info) {
			if (info.status === 'playing') {
				appElement.classList.remove('hidden')
				appElement.classList.add('flex')
				titleElement.innerText = info.title
				artistsElement.innerText = info.artists.join(', ')
			} else {
				appElement.classList.add('hidden')
				appElement.classList.remove('flex')
			}
		}
	}

	setInterval(async () => {
		const info = await getTrackInfo(url)
		setElements(info!)
	}, 1000)
</script>
